// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: blog/blog/query.proto

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName    = "/blog.blog.Query/Params"
	Query_PostList_FullMethodName  = "/blog.blog.Query/PostList"
	Query_PostItem_FullMethodName  = "/blog.blog.Query/PostItem"
	Query_PostCount_FullMethodName = "/blog.blog.Query/PostCount"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of PostList items.
	PostList(ctx context.Context, in *QueryPostListRequest, opts ...grpc.CallOption) (*QueryPostListResponse, error)
	// Queries a list of PostItem items.
	PostItem(ctx context.Context, in *QueryPostItemRequest, opts ...grpc.CallOption) (*QueryPostItemResponse, error)
	// Queries a list of PostCount items.
	PostCount(ctx context.Context, in *QueryPostCountRequest, opts ...grpc.CallOption) (*QueryPostCountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PostList(ctx context.Context, in *QueryPostListRequest, opts ...grpc.CallOption) (*QueryPostListResponse, error) {
	out := new(QueryPostListResponse)
	err := c.cc.Invoke(ctx, Query_PostList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PostItem(ctx context.Context, in *QueryPostItemRequest, opts ...grpc.CallOption) (*QueryPostItemResponse, error) {
	out := new(QueryPostItemResponse)
	err := c.cc.Invoke(ctx, Query_PostItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PostCount(ctx context.Context, in *QueryPostCountRequest, opts ...grpc.CallOption) (*QueryPostCountResponse, error) {
	out := new(QueryPostCountResponse)
	err := c.cc.Invoke(ctx, Query_PostCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of PostList items.
	PostList(context.Context, *QueryPostListRequest) (*QueryPostListResponse, error)
	// Queries a list of PostItem items.
	PostItem(context.Context, *QueryPostItemRequest) (*QueryPostItemResponse, error)
	// Queries a list of PostCount items.
	PostCount(context.Context, *QueryPostCountRequest) (*QueryPostCountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) PostList(context.Context, *QueryPostListRequest) (*QueryPostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostList not implemented")
}
func (UnimplementedQueryServer) PostItem(context.Context, *QueryPostItemRequest) (*QueryPostItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostItem not implemented")
}
func (UnimplementedQueryServer) PostCount(context.Context, *QueryPostCountRequest) (*QueryPostCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCount not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPostListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PostList(ctx, req.(*QueryPostListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PostItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPostItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PostItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PostItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PostItem(ctx, req.(*QueryPostItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PostCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPostCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PostCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PostCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PostCount(ctx, req.(*QueryPostCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.blog.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PostList",
			Handler:    _Query_PostList_Handler,
		},
		{
			MethodName: "PostItem",
			Handler:    _Query_PostItem_Handler,
		},
		{
			MethodName: "PostCount",
			Handler:    _Query_PostCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/blog/query.proto",
}
